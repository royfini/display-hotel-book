/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface RfDateRangePicker {
    }
    interface RfFirst {
    }
    interface RfGuest {
    }
    interface RfSecond {
    }
}
export interface RfDateRangePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRfDateRangePickerElement;
}
export interface RfFirstCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRfFirstElement;
}
export interface RfGuestCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRfGuestElement;
}
export interface RfSecondCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRfSecondElement;
}
declare global {
    interface HTMLRfDateRangePickerElementEventMap {
        "book": { firstDate: string; lastDate: string; guests: number };
    }
    interface HTMLRfDateRangePickerElement extends Components.RfDateRangePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRfDateRangePickerElementEventMap>(type: K, listener: (this: HTMLRfDateRangePickerElement, ev: RfDateRangePickerCustomEvent<HTMLRfDateRangePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRfDateRangePickerElementEventMap>(type: K, listener: (this: HTMLRfDateRangePickerElement, ev: RfDateRangePickerCustomEvent<HTMLRfDateRangePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRfDateRangePickerElement: {
        prototype: HTMLRfDateRangePickerElement;
        new (): HTMLRfDateRangePickerElement;
    };
    interface HTMLRfFirstElementEventMap {
        "hide_cal": boolean;
        "send_first_date": Date;
        "send_second_date": Date;
        "sub_month": { month: number; year: number };
        "upd_month": { month: number; year: number };
        "upd_year": { month: number; year: number };
        "close_cal": Date;
    }
    interface HTMLRfFirstElement extends Components.RfFirst, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRfFirstElementEventMap>(type: K, listener: (this: HTMLRfFirstElement, ev: RfFirstCustomEvent<HTMLRfFirstElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRfFirstElementEventMap>(type: K, listener: (this: HTMLRfFirstElement, ev: RfFirstCustomEvent<HTMLRfFirstElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRfFirstElement: {
        prototype: HTMLRfFirstElement;
        new (): HTMLRfFirstElement;
    };
    interface HTMLRfGuestElementEventMap {
        "send_guest": number;
    }
    interface HTMLRfGuestElement extends Components.RfGuest, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRfGuestElementEventMap>(type: K, listener: (this: HTMLRfGuestElement, ev: RfGuestCustomEvent<HTMLRfGuestElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRfGuestElementEventMap>(type: K, listener: (this: HTMLRfGuestElement, ev: RfGuestCustomEvent<HTMLRfGuestElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRfGuestElement: {
        prototype: HTMLRfGuestElement;
        new (): HTMLRfGuestElement;
    };
    interface HTMLRfSecondElementEventMap {
        "hide_cal": boolean;
        "send_first_date": Date;
        "send_second_date": Date;
        "updt_month": { month: number; year: number };
        "updt_year": { month: number; year: number };
        "add_month": { month: number; year: number };
        "close_cal": Date;
    }
    interface HTMLRfSecondElement extends Components.RfSecond, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRfSecondElementEventMap>(type: K, listener: (this: HTMLRfSecondElement, ev: RfSecondCustomEvent<HTMLRfSecondElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRfSecondElementEventMap>(type: K, listener: (this: HTMLRfSecondElement, ev: RfSecondCustomEvent<HTMLRfSecondElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRfSecondElement: {
        prototype: HTMLRfSecondElement;
        new (): HTMLRfSecondElement;
    };
    interface HTMLElementTagNameMap {
        "rf-date-range-picker": HTMLRfDateRangePickerElement;
        "rf-first": HTMLRfFirstElement;
        "rf-guest": HTMLRfGuestElement;
        "rf-second": HTMLRfSecondElement;
    }
}
declare namespace LocalJSX {
    interface RfDateRangePicker {
        "onBook"?: (event: RfDateRangePickerCustomEvent<{ firstDate: string; lastDate: string; guests: number }>) => void;
    }
    interface RfFirst {
        "onClose_cal"?: (event: RfFirstCustomEvent<Date>) => void;
        "onHide_cal"?: (event: RfFirstCustomEvent<boolean>) => void;
        "onSend_first_date"?: (event: RfFirstCustomEvent<Date>) => void;
        "onSend_second_date"?: (event: RfFirstCustomEvent<Date>) => void;
        "onSub_month"?: (event: RfFirstCustomEvent<{ month: number; year: number }>) => void;
        "onUpd_month"?: (event: RfFirstCustomEvent<{ month: number; year: number }>) => void;
        "onUpd_year"?: (event: RfFirstCustomEvent<{ month: number; year: number }>) => void;
    }
    interface RfGuest {
        "onSend_guest"?: (event: RfGuestCustomEvent<number>) => void;
    }
    interface RfSecond {
        "onAdd_month"?: (event: RfSecondCustomEvent<{ month: number; year: number }>) => void;
        "onClose_cal"?: (event: RfSecondCustomEvent<Date>) => void;
        "onHide_cal"?: (event: RfSecondCustomEvent<boolean>) => void;
        "onSend_first_date"?: (event: RfSecondCustomEvent<Date>) => void;
        "onSend_second_date"?: (event: RfSecondCustomEvent<Date>) => void;
        "onUpdt_month"?: (event: RfSecondCustomEvent<{ month: number; year: number }>) => void;
        "onUpdt_year"?: (event: RfSecondCustomEvent<{ month: number; year: number }>) => void;
    }
    interface IntrinsicElements {
        "rf-date-range-picker": RfDateRangePicker;
        "rf-first": RfFirst;
        "rf-guest": RfGuest;
        "rf-second": RfSecond;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "rf-date-range-picker": LocalJSX.RfDateRangePicker & JSXBase.HTMLAttributes<HTMLRfDateRangePickerElement>;
            "rf-first": LocalJSX.RfFirst & JSXBase.HTMLAttributes<HTMLRfFirstElement>;
            "rf-guest": LocalJSX.RfGuest & JSXBase.HTMLAttributes<HTMLRfGuestElement>;
            "rf-second": LocalJSX.RfSecond & JSXBase.HTMLAttributes<HTMLRfSecondElement>;
        }
    }
}
